zabbix_export:
  version: '6.4'
  media_types:
    - name: ntfy.sh
      type: WEBHOOK
      parameters:
        - name: Message
          value: '{ALERT.MESSAGE}'
        - name: Nseverity
          value: '{EVENT.NSEVERITY}'
        - name: Password
          value: '{$NTFY.PASS}'
        - name: Subject
          value: '{ALERT.SUBJECT}'
        - name: Token
          value: '{$NTFY.TOKEN}'
        - name: URL
          value: '{$NTFY.URL}'
        - name: Username
          value: '{$NTFY.USER}'
      script: |
      try {
      Zabbix.log(4, '[ ntfy Webhook ] Executed with params: ' + value);
      var params = JSON.parse(value);
    
      if (!params.URL) {
        throw 'Cannot get ntfy url!';
      } else {
        var urlWithTopic = params.URL.endsWith('/') ? params.URL + params.Topic : params.URL + '/' + params.Topic;
      }

      var response, request = new HttpRequest();
      // Check for proxy
      if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {
          request.setProxy(params.HTTPProxy);
      }

      // Headers
      request.addHeader('Content-Type: text/plain');
      request.addHeader('Title: ' + params.AlertSubject);
      if (params.Nseverity === 0) {
          request.addHeader('X-Priority: 3');
      } else {
          request.addHeader('X-Priority: ' + params.Nseverity);
      }

      if (params.Token) {
          request.addHeader('Authorization: Bearer ' + params.Token);
      } else if (params.Username && params.Password) {
          request.setHttpAuth(HTTPAUTH_BASIC, params.Username, params.Password);
      } 

      // Send the message as plain text
      response = request.post(urlWithTopic, params.Message);
      return true;
  }
catch (error) {
    Zabbix.log(3, '[ ntfy webhook ] notification failed: ' + error);
    throw 'Sending failed: ' + error;
}
      message_templates:
        - event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: 'Problem: {EVENT.NAME}'
          message: |
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Problem name: {EVENT.NAME}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Operational data: {EVENT.OPDATA}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: 'Resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: UPDATE
          subject: 'Updated problem in {EVENT.AGE}: {EVENT.NAME}'
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            {EVENT.UPDATE.MESSAGE}
            
            Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.
        - event_source: DISCOVERY
          operation_mode: PROBLEM
          subject: 'Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}'
          message: |
            Discovery rule: {DISCOVERY.RULE.NAME}
            
            Device IP: {DISCOVERY.DEVICE.IPADDRESS}
            Device DNS: {DISCOVERY.DEVICE.DNS}
            Device status: {DISCOVERY.DEVICE.STATUS}
            Device uptime: {DISCOVERY.DEVICE.UPTIME}
            
            Device service name: {DISCOVERY.SERVICE.NAME}
            Device service port: {DISCOVERY.SERVICE.PORT}
            Device service status: {DISCOVERY.SERVICE.STATUS}
            Device service uptime: {DISCOVERY.SERVICE.UPTIME}
        - event_source: AUTOREGISTRATION
          operation_mode: PROBLEM
          subject: 'Autoregistration: {HOST.HOST}'
          message: |
            Host name: {HOST.HOST}
            Host IP: {HOST.IP}
            Agent port: {HOST.PORT}
        - event_source: INTERNAL
          operation_mode: PROBLEM
        - event_source: INTERNAL
          operation_mode: RECOVERY
        - event_source: SERVICE
          operation_mode: PROBLEM
          subject: 'Service "{SERVICE.NAME}" problem: {EVENT.NAME}'
          message: |
            Service problem started at {EVENT.TIME} on {EVENT.DATE}
            Service problem name: {EVENT.NAME}
            Service: {SERVICE.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            Service description: {SERVICE.DESCRIPTION}
            
            {SERVICE.ROOTCAUSE}
        - event_source: SERVICE
          operation_mode: RECOVERY
          subject: 'Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            Service description: {SERVICE.DESCRIPTION}
        - event_source: SERVICE
          operation_mode: UPDATE
          subject: 'Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}'
          message: |
            Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            Current problem age is {EVENT.AGE}.
            Service description: {SERVICE.DESCRIPTION}
            
            {SERVICE.ROOTCAUSE}
